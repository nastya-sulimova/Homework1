// –ó–∞–¥–∞–Ω–∏–µ 1
const numbers = [1, 5, 4, 10, 0, 3];

for (let i = 0; i < numbers.length; i++) {
    if (numbers[i]!==0) {
        console.log(numbers[i]);
    } else {
        break;
    };   
};


// –ó–∞–¥–∞–Ω–∏–µ 2
const findIndex = [1, 5, 4, 10, 0, 3];

// 1
let index = findIndex.indexOf(4);
console.log(index);

// 2
for (let i = 0; i < findIndex.length; i++) {
    if (findIndex[i]===4) {
        console.log(i);
    };   
};


// –ó–∞–¥–∞–Ω–∏–µ 3
const numbs = [1, 3, 5, 10, 20];

console.log(numbs.join(' '));


// –ó–∞–¥–∞–Ω–∏–µ 4
const multArray = [
    [1, 1, 1], 
    [1, 1, 1], 
    [1, 1, 1]
];

// 1
console.log(multArray);

// 2
 for (let arr of multArray) {
    console.log(arr);
    for (let item of arr) {
        console.log(item);
    };
 };

// 3
 for (let i = 0; i < multArray.length; i++) {
    if (i<multArray.length) {
        console.log(multArray[i]);
    } else {
        break; 
    };
 };


// –ó–∞–¥–∞–Ω–∏–µ 5
 const addNumb = [1, 1, 1];
 addNumb.push(2, 2, 2);
 console.log(addNumb);


// –ó–∞–¥–∞–Ω–∏–µ 6
const numbsLetter = [9, 8, 7, 'a', 6, 5];

// 1
numbsLetter.sort();
numbsLetter.pop();
console.log(numbsLetter);

// 2
numbsLetter.sort();
const filtered = numbsLetter.filter(number=>Number(number));
console.log(filtered);


// –ó–∞–¥–∞–Ω–∏–µ 7
const ourNumbers = [9, 8, 7, 6, 5];

// 1
function guessWord() {

    for (let i = 0; i < ourNumbers.length;) {
        let userNumber = Number(prompt(`–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ`));
        if (!ourNumbers.includes(userNumber)) {
            alert(`–ù–µ —É–≥–∞–¥–∞–ª`);  
        } else {
            alert(`–£–≥–∞–¥–∞–ª`);  
            break;
        };
    };
};

guessWord();

// 2
// function guessWord() {
//     let userNumber = Number(prompt(`–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ`));

//     if (!ourNumbers.includes(userNumber)) {
//         alert(`–ù–µ —É–≥–∞–¥–∞–ª`);  
//     } else {
//             alert(`–£–≥–∞–¥–∞–ª`);
//     };
// };

// guessWord();


// –ó–∞–¥–∞–Ω–∏–µ 8
const letters = 'abcdef';
const newLetters = letters.split('');
const reverse = newLetters.reverse('');
const reverseString = reverse.join('');
console.log(reverseString);


// –ó–∞–¥–∞–Ω–∏–µ 9
const twoArrs = [[1, 2, 3],[4, 5, 6]];

const merged = [...twoArrs[0], ...twoArrs[1]];
console.log(merged);


// –ó–∞–¥–∞–Ω–∏–µ 10
const math = [4, 8, 1, 6, 7];

for (let i = 0; i < math.length-1; i++) {
  const sumMath = math[i]+math[i+1];
  console.log(sumMath);
};


// –ó–∞–¥–∞–Ω–∏–µ 11
// 1
function square([l,k,h]) {
   return [l**2 ,k**2, h**2];
};
console.log(square([2, 5, 6]));

// 2
const sqArr = [2, 5, 6];

const mapSqArr = sqArr.map(numb=>numb**2);
console.log(mapSqArr);


// –ó–∞–¥–∞–Ω–∏–µ 12
const arrString = [`–ú–∞—Å—Å–∏–≤`, `—Å—Ç—Ä–æ–∫`];

const mapArrString = arrString.map(el=>el.length);
console.log(mapArrString);


// –ó–∞–¥–∞–Ω–∏–µ 13
const diffNumbs = [54, 1, 0, -10, 15, -2, 20, 4, -50];

const filteredNumbs = diffNumbs.filter(item=>item<0);
console.log(filteredNumbs);


// –ó–∞–¥–∞–Ω–∏–µ 14
let randomNumbers = [];

for (let i = 0; i < 10; i++) {
    randomNumbers[i]=Math.floor(Math.random()*(10-0+1))+0;
}

let evenNumbers = randomNumbers.filter(even => even%2===0);

console.log(randomNumbers);
console.log(evenNumbers);


// –ó–∞–¥–∞–Ω–∏–µ 15
let randomNumber = [];

for (let i = 0; i < 6; i++) {
    randomNumber[i]=Math.floor(Math.random()*(10-1+1))+1;
}

let mean = randomNumber.reduce((total,number)=>total+number,0)/randomNumber.length;

console.log(randomNumber);
console.log(mean);













// ----------------------------------------–ø—Ä–∞–∫—Ç–∏–∫–∞, –ª–µ–∫—Ü–∏–∏ –∏ –ø—Ä–æ—á–µ–µ---------------------------------------------------------------



// function getRandomNumber(min, max) {
//     let randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;
//     return randomNumber;
// };

// console.log(getRandomNumber(10, 50));
 


// let emotions = ['üòÑ', 'üò¢', 'üò°', 'üò±', 'üòç', 'ü§î'];

// for (let i = 0; i < emotions.length; i++) {
//     let randomEmotions = Math.floor(Math.random()*emotions.length);
//     alert(emotions[randomEmotions]);
// }


// let emotions = ['üòÑ', 'üò¢', 'üò°', 'üò±', 'üòç', 'ü§î'];
// let randomEmotions = Math.floor(Math.random()*emotions.length);

// for (let i = 0; i < emotions.length; i++) {
//     alert(emotions[i]);
// }


// let colors = ['red', 'green', 'blue', 'yellow', 'pink'];
// let randomColor = Math.floor(Math.random()*colors.length);
// console.log(colors[randomColor]);


// üí¨ –§–æ—Ä–º—É–ª–∞ –¥–ª—è –ª—é–±–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [min, max]:
// Math.floor(Math.random() * (max - min + 1)) + min;


// randomN = Math.floor(Math.random() * (15 - 5 + 1))+5;
// console.log(randomN);


// randomN = Math.floor(Math.random()*10)+1;
// console.log(randomN);











// const ages = [11, 18, 10, 17, 21, 31, 16];
// console.log(ages);

// const filteredAges = ages.filter(age => age >= 12);
// console.log(filteredAges);




// // –≤–æ—Ç —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è
// const newspaper = {
//     sports: {
//         title: 'ARod Hits Home Run',
//         writers: ['Miramon Nuevo', 'Rick Reilly', 'Woddy Paige'],
//     },
//     business: {
//         title: 'GE Stock Dips Again',
//         writers: ['Adam Smith', 'Albert Humphrey', 'Charles Handy'],
//     },
//     movies: {
//         title: 'Superman Is A Flop',
//         writers: ['Rogert Ebert', 'Andrew Sarris', 'Wesley Morris'],
//     },
//  };

// console.log(newspaper['sports']['title']);
// console.log(newspaper['business']['writers'][1]);



//  function showWholePaper() {
//     for (const key in newspaper) {
//       console.log(`${newspaper[key]['title']}`);
//       console.log(`${newspaper[key]['writers'].join(', ')}`);
//     }
// }

// console.log(showWholePaper());





// // –≤–æ—Ç —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è
// const book = [
//     { name: 'foreword', pageCount: 14 },
//     { name: 'boyWhoLived', pageCount: 18 },
//     { name: 'vanishingGlass', pageCount: 13 },
//     { name: 'lettersFromNoOne', pageCount: 17 },
//     { name: 'afterword', pageCount: 19 },
//  ];

//  console.log(book.findIndex(item=> item.pageCount===17));

//  console.log(book.forEach((el)=>{
//     console.log(el);
//  }));

// function showWholeBook() {
//     for (let i = 0; i < book.length; i++) {
//         console.log(`–ì–ª–∞–≤–∞ ${book[i]['name']}`);
//         console.log(`  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü ${book[i]['pageCount']}`);
//     }
// }

// console.log(showWholeBook());






// spread —ç—Ç–æ —Ç—Ä–∏ —Ç–æ—á–µ—á–∫–∏ —Ç–∏–ø–∞
// let arrSum = [7,10]

// const funcSum = (a,b) =>{
//     return a+b;
// }
// console.log(funcSum(...arrSum));


// rest —ç—Ç–æ —Ç—Ä–∏ —Ç–æ—á–µ—á–∫–∏ —Ç–∏–ø–∞
// let arrSum = [7,10,1,3]

// const funcSum = (a,b,...arrSumRest) =>{
//     console.log(a+b);
//     console.log(arrSumRest);
// }
// console.log(funcSum(...arrSum));





// // –≤–æ—Ç —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è
// let catalog = [
//     ['–°—Ç–æ–ª—ã', '–î–æ—Ä–æ–≥–æ–π —Å—Ç–æ–ª', '–ë–æ–ª—å—à–æ–π —Å—Ç–æ–ª'],
//     ['–î–∏–≤–∞–Ω—ã', '–ö—Ä–∞—Å–Ω—ã–π –¥–∏–≤–∞–Ω', '–ë–µ–ª—ã–π –¥–∏–≤–∞–Ω'],
//     [1,2,3,4,10,20]
//  ]

//  for (let catalogIn of catalog) {
//     console.log(catalogIn);
//     for (let item of catalogIn) {
//         console.log(item);
//         if (typeof item === 'string' && item.length > 1) {
//             for (let itemIn of item) {
//                 console.log(itemIn);
//             }
//         }
//     }
//  }

// for (let catalogIn of catalog) {
//     console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:');
//     for (let item of catalogIn) {
//         console.log('  –≠–ª–µ–º–µ–Ω—Ç:', item);
//         if (typeof item === 'string' && item.length > 1) {
//             for (let itemIn of item) {
//                 console.log('    –°–∏–º–≤–æ–ª:', itemIn);
//             }
//         }
//     }
// }








// for (let catalogIn of catalog) {
//     for (let i=0; i<catalogIn.length; i++) {
//           if (i===0) {
//             console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${catalogIn[i]}`);
//           } else {
//             console.log(`${catalogIn[i]}`);
//           }
//     }
    
// }






// function mergeAndSort([3, 5, 2], [5, 8, 1]) {
    
// –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –ø–æ–¥—É–º–∞—Ç—å —Å –≤–æ—Ä–∫—à–æ–ø–∞}






// let song = `–Ω–∞-–º–∞–ª–µ–Ω—å–∫–æ–º-–ø–ª–æ—Ç—É`;
// song = song.split(`-`);
// console.log(song);

// song = song.join(` `);
// console.log(song);







// ------------–¢–†–ï–ù–ò–†–û–í–ê–õ–ê–°–¨ –° –ü–û–•–û–ñ–ï–ô –ó–ê–î–ê–ß–ï–ô (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–æ–º–∞—à–∫–µ –±—ã–ª–∞ "—É–≥–∞–¥–∞–π —á–∏—Å–ª–æ")-------------------------

// const words = ["—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–≥—Ä—É—à–∞", "–∞–ø–µ–ª—å—Å–∏–Ω"];
// const ourWord = words[2];

// function guessWord() {
//     let userWord = prompt(`–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ`);
   
//     while (true) {
//         if (!words.includes(userWord)){
//             alert(`–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ –±—ã–ª–æ - –∏–∑–≤–∏–Ω–∏(`)
//         } else if (userWord===words[0]){
//             alert(`üîº –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Ä–∞–Ω—å—à–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É`);
//         } else if (userWord===words[1] || userWord===words[3]) {
//             alert(`üîΩ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ–∑–∂–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É`);
//         } else if (userWord===ourWord) {
//             alert(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!`);
//             break;
//         }
//         userWord = prompt(`–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
//     }
// }

// guessWord();









// const words = ["—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–≥—Ä—É—à–∞", "–∞–ø–µ–ª—å—Å–∏–Ω"];
// const ourWord = words[2];

// function guessWord() {
//     let userWord = prompt(`–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ`);
   
//     while (true) {
//         if (userWord===words[1] || userWord===words[3]) {
//             alert(`üîΩ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ–∑–∂–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É`);
//         } else if (userWord===words[0]){
//             alert(`üîº –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Ä–∞–Ω—å—à–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É`);
//         } else if (!words.includes(userWord)){
//             alert(`–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ –±—ã–ª–æ - –∏–∑–≤–∏–Ω–∏(`);
//         } else if (userWord===ourWord) {
//             alert(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!`);
//             break;
//         }
//         userWord = prompt(`–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:`);
//     }
// }

// guessWord();



// –í–û–¢ –≠–¢–û –ù–ï –†–ê–ë–û–¢–ê–ï–¢, –ù–ê–†–£–®–ï–ù–ê –õ–û–ì–ò–ö–ê –ü–†–ò–û–†–ò–¢–ï–¢–û–í –£–°–õ–û–í–ò–ô –ß–¢–û-–¢–û –¢–ê–ú
// –°–ù–ê–ß–ê–õ–ê –ü–†–û–í–ï–†–Ø–ï–¢ –ê–õ–§–ê–í–ò–¢–ù–´–ô –ü–û–†–Ø–î–û–ö, –ü–†–û–õ–£–ß–ê–ï–¢–°–Ø –•–ï–†–ù–Ø
// const words = ["—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–≥—Ä—É—à–∞", "–∞–ø–µ–ª—å—Å–∏–Ω"];
// const ourWord = words[2];

// function guessWord() {
//     let userWord = prompt(–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ);
   
//     while (true) {
//         if (userWord < ourWord) {
//             alert(üîΩ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ–∑–∂–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É);
//         } else if (userWord > ourWord){
//             alert(üîº –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Ä–∞–Ω—å—à–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É);
//         } else if (!words.includes(userWord)){
//             alert(–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ –±—ã–ª–æ - –∏–∑–≤–∏–Ω–∏();
//         } else if (userWord===ourWord) {
//             alert(‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!);
//             break;
//         }
//         userWord = prompt(–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:);
//     }
// }

// guessWord();



// const words = ["—è–±–ª–æ–∫–æ", "–±–∞–Ω–∞–Ω", "–≥—Ä—É—à–∞", "–∞–ø–µ–ª—å—Å–∏–Ω"];
// const ourWord = words[2]; // –≥—Ä—É—à–∞

// function guessWord() {
//   let userWord = prompt("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ");

//   while (true) {
//     if (!words.includes(userWord)) {
//       alert("–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ –±—ã–ª–æ - –∏–∑–≤–∏–Ω–∏!");
//     } else if (userWord === ourWord) {
//       alert("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!");
//       break;
//     } else if (userWord < ourWord) {
//       alert("üîº –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –ø–æ–∑–∂–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É");
//     } else if (userWord > ourWord) {
//       alert("üîΩ –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Ä–∞–Ω—å—à–µ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É");
//     }

//     userWord = prompt("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
//   }
// }

// guessWord();