// –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
const playButton=document.querySelectorAll(".mini-games__link_click-1, .mini-games__link_click-1-mobile");

playButton.forEach(button => {
  button.addEventListener("click", (event) => {
    event.preventDefault();
    guessNumber();
  });
});

function guessNumber() {
    const number=Math.floor(Math.random()*(100-1+1))+1;
    let userNumber;

    while (true) {
        userNumber=Number(prompt("–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:"));
        if (userNumber < 1 || userNumber > 100 || isNaN(userNumber)) {
            alert("–£–ø—Å! –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.");
        } else if (userNumber < number) {
            alert("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
        } else if (userNumber > number) {
            alert("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.");
        } else if ((userNumber) === number){
            alert("–¢—ã —É–≥–∞–¥–∞–ª! üéâ");
            break;
        }
    }
}

// –ü—Ä–æ—Å—Ç–∞—è –∞—Ä–∏—Ñ–º–µ—Ç–∏–∫–∞
const playButtons=document.querySelectorAll(".mini-games__link_click-2, .mini-games__link_click-2-mobile");
playButtons.forEach(button => {
  button.addEventListener("click",(event) => {
    event.preventDefault();
    startGame(); 
  });
});

function startGame() {
let userN1=Math.floor(Math.random() * 101);
let userN2=Math.floor(Math.random() * 101);
let operations=['+','-','*','/'];
let randomIndex=Math.floor(Math.random()*operations.length);
let action=operations[randomIndex];

alert(`${userN1} ${action} ${userN2}=?`);
result=Number(prompt(`–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç`));

if (action==='+') {
    correctAnswer=userN1+userN2;
} else if (action==='-') {
    correctAnswer=userN1-userN2;
} else if (action==='*') {
    correctAnswer=userN1*userN2;
} else if (action==='/') {
    correctAnswer=userN1/userN2;
}

if (correctAnswer===result) {
    alert("–ú–æ–ª–æ–¥–µ—Ü!");
} else {
    alert("–û—à–∏–±–∫–∞!");
}
  }

// –ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ —Ç–µ–∫—Å—Ç
let turnTheTextOverClick=document.querySelectorAll(".mini-games__link_click-3, .mini-games__link_click-3-mobile");
turnTheTextOverClick.forEach(button=>{
    button.addEventListener("click", (turn)=>{
        turn.preventDefault();
        turnTheTextOver();
    });    
});

const turnTheTextOver = () => {
    let userText=prompt(`–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç`);
    const isValid=/^.{1,10}$/.test(userText);

    if (isValid===true) {
        const userTextSplitted=userText.split(``);
        const userTextReversed=userTextSplitted.reverse();
        const userTextJoined=userTextReversed.join(``);
        alert(userTextJoined.toLowerCase());
    } else {
        alert(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑`);
    }
};

// –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
let findQuiz=document.querySelectorAll(".mini-games__link_click-4, .mini-games__link_click-4-mobile");
findQuiz.forEach(button => {
    button.addEventListener('click', (quiz)=>{
        quiz.preventDefault();
        playTheQuiz();
    });
});

const playTheQuiz = () => {
    const quiz=[
        {
            question:"–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –Ω–µ–±–æ?",
            options:["1. –ö—Ä–∞—Å–Ω—ã–π", "2. –°–∏–Ω–∏–π", "3. –ó–µ–ª–µ–Ω—ã–π"],
            correctAnswer:2
        },
        {
            question:"–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª–µ?",
            options:["1. –®–µ—Å—Ç—å", "2. –°–µ–º—å", "3. –í–æ—Å–µ–º—å"],
            correctAnswer:2
        },
        {
            question:"–°–∫–æ–ª—å–∫–æ —É —á–µ–ª–æ–≤–µ–∫–∞ –ø–∞–ª—å—Ü–µ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Ä—É–∫–µ?",
            options:["1. –ß–µ—Ç—ã—Ä–µ", "2. –ü—è—Ç—å", "3. –®–µ—Å—Ç—å"],
            correctAnswer:2
        }
    ];

    let correctCount=0;

    for (let i = 0; i < quiz.length; i++) {
        alert(`${quiz[i]["question"]}`);
        let userAnswer=prompt(`–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
        ${quiz[i]["options"]}`);
        if (Number(userAnswer)===quiz[i]["correctAnswer"]) {
            correctCount++;
        }
    };
    alert(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ${correctCount} –∏–∑ 3`);
};

// –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
let stonePaperScissors=document.querySelectorAll(".mini-games__link_click-5, .mini-games__link_click-5-mobile");
stonePaperScissors.forEach(button=>{
    button.addEventListener('click', (sps)=>{
        sps.preventDefault();
        playStonePaperScissors();
    });
});

const playStonePaperScissors = () => {
while (true) {
    const userChoice=prompt(`–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞?`);
    const options=["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"];
    const compChoiceIndex=Math.floor(Math.random()*3);
    const compChoice=options[compChoiceIndex];

    if (!options.includes(userChoice)) {
        alert(`–£–ø—Å, —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑!`); 
        continue;
    } else if (compChoice==="–Ω–æ–∂–Ω–∏—Ü—ã" && userChoice==="–±—É–º–∞–≥–∞"){
        alert(`–¢–≤–æ–π –≤—ã–±–æ—Ä: ${userChoice.toUpperCase()}, –≤—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: ${compChoice.toUpperCase()} 
            –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª, –ø–æ–ø—Ä–æ–±—É–π –æ–¥–æ–ª–µ—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä –µ—â–µ —Ä–∞–∑!`); 
    } else if (compChoice==="–±—É–º–∞–≥–∞" && userChoice==="–∫–∞–º–µ–Ω—å"){
        alert(`–¢–≤–æ–π –≤—ã–±–æ—Ä: ${userChoice.toUpperCase()}, –≤—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: ${compChoice.toUpperCase()} 
            –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª, –ø–æ–ø—Ä–æ–±—É–π –æ–¥–æ–ª–µ—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä –µ—â–µ —Ä–∞–∑!`); 
    } else if (compChoice==="–∫–∞–º–µ–Ω—å" && userChoice==="–Ω–æ–∂–Ω–∏—Ü—ã"){
        alert(`–¢–≤–æ–π –≤—ã–±–æ—Ä: ${userChoice.toUpperCase()}, –≤—ã–±–æ—Ä –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: ${compChoice.toUpperCase()} 
            –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª, –ø–æ–ø—Ä–æ–±—É–π –æ–¥–æ–ª–µ—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä –µ—â–µ —Ä–∞–∑!`); 
    } else if (userChoice===compChoice){
        alert(`–ù–∏—á—å—è!`); 
        break;
    } else {
        alert(`–¢—ã –ø–æ–±–µ–¥–∏–ª, –º–æ–ª–æ–¥–µ—Ü!`); 
        break;
    };
}
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
const miniGamesEl=document.querySelector('.mini-games');
const changeColorBtn=document.querySelectorAll('.mini-games__link_click-6, .mini-games__link_click-6-mobile');

const changeColor = () => {
    const r=Math.floor(Math.random()*256);
    const g=Math.floor(Math.random()*256);
    const b=Math.floor(Math.random()*256);
    return `rgb(${r},${g},${b})`;
}

changeColorBtn.forEach(button=>{
    button.addEventListener("click",event=>{
        event.preventDefault();
        miniGamesEl.style.backgroundImage="none";
        miniGamesEl.style.backgroundColor=changeColor();
    })
})